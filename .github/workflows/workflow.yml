name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  backend-deploy:
    runs-on: ubuntu-latest
    steps:
      # SOURCE 단계 - 저장소 Checkout
      - name: Checkout-source code
        uses: actions/checkout@v3
        with:
          token: ${{secrets.GH_TOKEN}}
          submodules: true

      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Spring boot application 빌드
      - name: Build with gradle
        run: ./gradlew clean build -x test

      # GHCR(github container registry) 로그인
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{secrets.GH_USER}}
          password: ${{secrets.GH_TOKEN}}

      # Build & Push to GHCR
      - name: Build and push
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{secrets.GH_USER}}/novel-park:0.0

      # Copy docker-compose-deploy.yml & nginx.conf
      - name: Deliver file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.WAS_SSH_PORT }}
          source: "docker-compose-deploy.yml, nginx.conf"
          target: "/home/ubuntu/ec2-user"
      
      # Connect to WAS & Execute Application
      - name: Connect to WAS & Execute Application
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.WAS_HOST }}
          username: ${{ secrets.WAS_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.WAS_SSH_PORT }}
          script: |
            echo ${{secrets.GH_TOKEN}} >> TOKEN.txt
            cat TOKEN.txt | docker login https://ghcr.io -u ${{secrets.GH_USER}} --password-stdin
            docker-compose -f docker-compose-deploy.yml down -v
            docker-compose -f docker-compose-deploy.yml pull
            docker-compose -f docker-compose-deploy.yml up -d
            docker image prune -f
